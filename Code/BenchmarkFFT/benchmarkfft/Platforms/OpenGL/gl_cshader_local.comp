#version 450
#define LOCAL_DIM_X 1024
#define SHARED_MEM_SIZE 2048

struct cpx {
    float x;
    float y;
};

layout(local_size_x = LOCAL_DIM_X) in;

layout(std430, binding = 0) buffer ssbo0{ cpx input_data[]; };
layout(std430, binding = 1) buffer ssbo1{ cpx output_data[]; };

shared cpx shared_buf[SHARED_MEM_SIZE];

uniform float local_angle;
uniform float scalar;
uniform uint leading_bits;
uniform uint steps_left;

void dx_algorithm_local(uint in_low, uint in_high);

void main()
{
    uint in_low = gl_LocalInvocationID.x;
    uint in_high = in_low + block_range;
    uint offset = (gl_WorkGroupID.x * gl_WorkGroupSize.x) << 1;
    shared_buf[in_low] = input_data[(in_low + offset)];
    shared_buf[in_high] = input_data[(in_high + offset)];

    dx_algorithm_local(in_low, in_high);

    output_data[(bitfieldReverse(in_low + offset) >> leading_bits)] = cpx((shared_buf[in_low].x * scalar), (shared_buf[in_low].y * scalar));
    output_data[(bitfieldReverse(in_high + offset) >> leading_bits)] = cpx((shared_buf[in_high].x * scalar), (shared_buf[in_high].y * scalar));
}

void dx_algorithm_local(uint in_low, uint in_high)
{
    float angle, x, y;
    cpx w, in_lower, in_upper;
    uint p;
    uint out_i = (in_low << 1);
    uint out_ii = (out_i + 1);
    for (uint steps = 0; steps < steps_left; ++steps)
    {
        p = (in_low & uint(0xFFFFFFFF << steps));
        angle = local_angle * float(p);
        w.x = cos(angle);
        w.y = sin(angle);
        in_lower = shared_buf[in_low];
        in_upper = shared_buf[in_high];
        barrier();
        
        float x = in_lower.x - in_upper.x;
        float y = in_lower.y - in_upper.y;
        shared_buf[out_i] =  cpx(in_lower.x + in_upper.x, in_lower.y + in_upper.y);
        shared_buf[out_ii] = cpx((w.x * x) - (w.y * y), (w.y * x) + (w.x * y));

        barrier();
    }
}