_inline void cCGBody(cpx *in, cpx *out, const cpx *W, const unsigned int mask, const int n)
{
00823650  push        ebp  
00823651  mov         ebp,esp  
00823653  sub         esp,70h  
00823656  push        ebx  
00823657  push        esi  
00823658  push        edi  
00823659  mov         edi,ecx  
0082365B  mov         dword ptr [ebp-8],edx  
    const int n2 = n / 2;
0082365E  mov         ecx,dword ptr [n]  
00823661  mov         eax,ecx  
00823663  cdq  
00823664  sub         eax,edx  
    for (int i = 0; i < n; i += 2) {
00823666  xor         edx,edx  
00823668  sar         eax,1  
0082366A  mov         dword ptr [ebp-0Ch],eax  
0082366D  mov         dword ptr [ebp-4],edx  
00823670  test        ecx,ecx  
00823672  jle         cCGBody+159h (08237A9h)  
    const int n2 = n / 2;
00823678  mov         ebx,dword ptr [W]  
0082367B  jmp         cCGBody+30h (0823680h)  
0082367D  lea         ecx,[ecx]  
        int l = i / 2;
00823680  shr         edx,1  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00823682  mov         esi,edx  
00823684  and         esi,dword ptr [mask]  
00823687  lea         ecx,[edx+eax]  
0082368A  mov         eax,dword ptr [edi+ecx*8]  
0082368D  mov         dword ptr [ebp-28h],eax  
00823690  mov         eax,dword ptr [edi+ecx*8+4]  
00823694  mov         dword ptr [ebp-24h],eax  
00823697  mov         eax,dword ptr [edi+edx*8]  
0082369A  mov         dword ptr [ebp-20h],eax  
0082369D  mov         eax,dword ptr [edi+edx*8+4]  
008236A1  mov         dword ptr [ebp-1Ch],eax  
008236A4  mov         eax,dword ptr [edi+edx*8]  
008236A7  mov         dword ptr [ebp-50h],eax  
008236AA  mov         eax,dword ptr [edi+edx*8+4]  
008236AE  mov         dword ptr [ebp-4Ch],eax  
008236B1  mov         eax,dword ptr [edi+ecx*8]  
008236B4  mov         dword ptr [ebp-48h],eax  
008236B7  mov         eax,dword ptr [edi+ecx*8+4]  
008236BB  mov         dword ptr [ebp-44h],eax  
008236BE  mov         eax,dword ptr [edi+edx*8]  
008236C1  mov         dword ptr [ebp-40h],eax  
008236C4  mov         eax,dword ptr [edi+edx*8+4]  
008236C8  mov         dword ptr [ebp-3Ch],eax  
008236CB  mov         eax,dword ptr [edi+ecx*8]  
008236CE  mov         dword ptr [ebp-38h],eax  
008236D1  movss       xmm0,dword ptr [ebp-38h]  
008236D6  addss       xmm0,dword ptr [ebp-40h]  
008236DB  mov         eax,dword ptr [edi+ecx*8+4]  
008236DF  mov         ecx,dword ptr [ebp-8]  
008236E2  movss       xmm3,dword ptr [ebp-20h]  
008236E7  movss       xmm2,dword ptr [ebp-1Ch]  
008236EC  subss       xmm3,dword ptr [ebp-28h]  
008236F1  subss       xmm2,dword ptr [ebp-24h]  
008236F6  movss       dword ptr [ebp-18h],xmm0  
008236FB  movss       xmm0,dword ptr [ebp-44h]  
00823700  addss       xmm0,dword ptr [ebp-4Ch]  
00823705  mov         dword ptr [ebp-34h],eax  
00823708  mov         eax,dword ptr [ebp-18h]  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
0082370B  mov         dword ptr [ecx],eax  
    for (int i = 0; i < n; i += 2) {
0082370D  mov         edx,dword ptr [ebp-4]  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00823710  movss       dword ptr [ebp-14h],xmm0  
    for (int i = 0; i < n; i += 2) {
00823715  add         edx,2  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00823718  mov         eax,dword ptr [ebp-14h]  
0082371B  mov         dword ptr [ecx+4],eax  
0082371E  mov         eax,dword ptr [ebx+esi*8]  
00823721  mov         dword ptr [ebp-70h],eax  
00823724  mov         eax,dword ptr [ebx+esi*8+4]  
00823728  mov         dword ptr [ebp-6Ch],eax  
0082372B  mov         eax,dword ptr [ebx+esi*8]  
0082372E  mov         dword ptr [ebp-68h],eax  
00823731  mov         eax,dword ptr [ebx+esi*8+4]  
00823735  mov         dword ptr [ebp-64h],eax  
00823738  mov         eax,dword ptr [ebx+esi*8]  
0082373B  mov         dword ptr [ebp-58h],eax  
0082373E  mov         eax,dword ptr [ebx+esi*8+4]  
00823742  movss       xmm1,dword ptr [ebp-58h]  
00823747  mov         dword ptr [ebp-54h],eax  
0082374A  mov         eax,dword ptr [ebx+esi*8]  
0082374D  mov         dword ptr [ebp-60h],eax  
00823750  mov         eax,dword ptr [ebx+esi*8+4]  
00823754  mov         dword ptr [ebp-5Ch],eax  
00823757  movss       xmm0,dword ptr [ebp-5Ch]  
0082375C  mulss       xmm1,xmm3  
    for (int i = 0; i < n; i += 2) {
00823760  mov         dword ptr [ebp-4],edx  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00823763  mulss       xmm0,xmm2  
00823767  subss       xmm1,xmm0  
0082376B  movss       xmm0,dword ptr [ebp-6Ch]  
00823770  mulss       xmm0,xmm3  
00823774  movss       dword ptr [ebp-30h],xmm1  
00823779  movss       xmm1,dword ptr [ebp-68h]  
0082377E  mov         eax,dword ptr [ebp-30h]  
00823781  mulss       xmm1,xmm2  
00823785  mov         dword ptr [ecx+8],eax  
00823788  addss       xmm1,xmm0  
0082378C  movss       dword ptr [ebp-2Ch],xmm1  
00823791  mov         eax,dword ptr [ebp-2Ch]  
00823794  mov         dword ptr [ecx+0Ch],eax  
    for (int i = 0; i < n; i += 2) {
00823797  add         ecx,10h  
0082379A  cmp         edx,dword ptr [n]  
0082379D  mov         dword ptr [ebp-8],ecx  
008237A0  mov         eax,dword ptr [ebp-0Ch]  
008237A3  jl          cCGBody+30h (0823680h)  
    }
}
008237A9  pop         edi  
008237AA  pop         esi  
008237AB  pop         ebx  
008237AC  mov         esp,ebp  
008237AE  pop         ebp  
008237AF  ret  