_inline void cCGBody(cpx *in, cpx *out, const cpx *W, const unsigned int mask, const int n)
{
00007FF6365839B0  mov         qword ptr [rsp+10h],rbx  
00007FF6365839B5  mov         qword ptr [rsp+18h],rsi  
00007FF6365839BA  mov         qword ptr [rsp+20h],rdi  
00007FF6365839BF  push        rbp  
00007FF6365839C0  mov         rbp,rsp  
00007FF6365839C3  sub         rsp,60h  
    for (int i = 0; i < n; i += 2) {
00007FF6365839C7  mov         ebx,dword ptr [rbp+30h]  
00007FF6365839CA  xor         r11d,r11d  
00007FF6365839CD  mov         rsi,r8  
00007FF6365839D0  mov         r10,rdx  
00007FF6365839D3  mov         rdi,rcx  
00007FF6365839D6  test        ebx,ebx  
00007FF6365839D8  jle         cCGBody+13Ah (07FF636583AEAh)  
    const int n2 = n / 2;
00007FF6365839DE  mov         eax,ebx  
00007FF6365839E0  mov         qword ptr [in],r14  
00007FF6365839E5  mov         r9d,r9d  
00007FF6365839E8  cdq  
00007FF6365839E9  sub         eax,edx  
00007FF6365839EB  sar         eax,1  
00007FF6365839ED  movsxd      r14,eax  
        int l = i / 2;
00007FF6365839F0  mov         eax,r11d  
00007FF6365839F3  add         r11d,2  
00007FF6365839F7  add         r10,10h  
00007FF6365839FB  shr         eax,1  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00007FF6365839FD  mov         edx,eax  
00007FF6365839FF  lea         rcx,[rax+r14]  
00007FF636583A03  mov         rax,qword ptr [rdi+rax*8]  
00007FF636583A07  and         rdx,r9  
00007FF636583A0A  mov         rcx,qword ptr [rdi+rcx*8]  
00007FF636583A0E  mov         rdx,qword ptr [rsi+rdx*8]  
00007FF636583A12  mov         qword ptr [rbp-50h],rax  
00007FF636583A16  mov         qword ptr [rbp-48h],rax  
00007FF636583A1A  mov         qword ptr [rbp-60h],rcx  
00007FF636583A1E  mov         qword ptr [rbp-58h],rcx  
00007FF636583A22  movss       xmm0,dword ptr [rbp-58h]  
00007FF636583A27  movss       xmm1,dword ptr [rbp-5Ch]  
00007FF636583A2C  mov         qword ptr [rbp-58h],rcx  
00007FF636583A30  mov         qword ptr [rbp-60h],rcx  
00007FF636583A34  mov         qword ptr [rbp-20h],rdx  
00007FF636583A38  addss       xmm0,dword ptr [rbp-48h]  
00007FF636583A3D  addss       xmm1,dword ptr [rbp-4Ch]  
00007FF636583A42  mov         qword ptr [rbp-48h],rax  
00007FF636583A46  mov         qword ptr [rbp-50h],rax  
00007FF636583A4A  mov         qword ptr [rbp-28h],rdx  
00007FF636583A4E  movss       dword ptr [rbp-40h],xmm0  
00007FF636583A53  movss       dword ptr [rbp-3Ch],xmm1  
00007FF636583A58  movss       xmm0,dword ptr [rbp-50h]  
00007FF636583A5D  movss       xmm1,dword ptr [rbp-44h]  
00007FF636583A62  movss       xmm2,dword ptr [rbp-28h]  
00007FF636583A67  mov         r8,qword ptr [rbp-40h]  
00007FF636583A6B  mov         qword ptr [rbp-50h],rdx  
00007FF636583A6F  mov         qword ptr [rbp-48h],rdx  
00007FF636583A73  subss       xmm0,dword ptr [rbp-60h]  
00007FF636583A78  subss       xmm1,dword ptr [rbp-54h]  
00007FF636583A7D  mov         qword ptr [r10-10h],r8  
00007FF636583A81  movss       dword ptr [rbp-38h],xmm0  
00007FF636583A86  movss       xmm0,dword ptr [rbp-44h]  
00007FF636583A8B  movss       dword ptr [rbp-34h],xmm1  
00007FF636583A90  mov         rax,qword ptr [rbp-38h]  
00007FF636583A94  mov         qword ptr [rbp-60h],rax  
00007FF636583A98  mov         qword ptr [rbp-58h],rax  
00007FF636583A9C  mov         qword ptr [rbp-10h],rax  
00007FF636583AA0  mulss       xmm0,dword ptr [rbp-54h]  
00007FF636583AA5  movss       xmm1,dword ptr [rbp-50h]  
00007FF636583AAA  mov         qword ptr [rbp-18h],rax  
        cpxAddSubMul(&out[i], &out[i + 1], in[l], in[n2 + l], W[l & mask]);
00007FF636583AAE  mulss       xmm1,dword ptr [rbp-60h]  
00007FF636583AB3  mulss       xmm2,dword ptr [rbp-14h]  
00007FF636583AB8  subss       xmm1,xmm0  
00007FF636583ABC  movss       xmm0,dword ptr [rbp-1Ch]  
00007FF636583AC1  mulss       xmm0,dword ptr [rbp-10h]  
00007FF636583AC6  movss       dword ptr [rbp-30h],xmm1  
00007FF636583ACB  addss       xmm2,xmm0  
00007FF636583ACF  movss       dword ptr [rbp-2Ch],xmm2  
00007FF636583AD4  mov         rax,qword ptr [rbp-30h]  
00007FF636583AD8  mov         qword ptr [r10-8],rax  
    for (int i = 0; i < n; i += 2) {
00007FF636583ADC  cmp         r11d,ebx  
00007FF636583ADF  jl          cCGBody+40h (07FF6365839F0h)  
00007FF636583AE5  mov         r14,qword ptr [in]  
    }
}
00007FF636583AEA  lea         r11,[rsp+60h]  
00007FF636583AEF  mov         rbx,qword ptr [r11+18h]  
00007FF636583AF3  mov         rsi,qword ptr [r11+20h]  
00007FF636583AF7  mov         rdi,qword ptr [r11+28h]  
00007FF636583AFB  mov         rsp,r11  
00007FF636583AFE  pop         rbp  
00007FF636583AFF  ret  