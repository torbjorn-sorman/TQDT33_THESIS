#ifndef FFT_GENERATED_FIXED_CONST_H
#define FFT_GENERATED_FIXED_CONST_H

#include "tb_definitions.h"
#include "tb_fft_helper.h"

#define GENERATED_FIXED_CONST

__inline static void fft_x4(cpx *in, cpx *out)
{
	cpx in0 = in[0];
	cpx in1 = in[1];
	cpx in2 = in[2];
	cpx in3 = in[3];
	out[0].r = (((in0.r + in2.r) + (in1.r + in3.r)) * 1.000000);
	out[0].i = (((in0.i + in2.i) + (in1.i + in3.i)) * 1.000000);
	out[1].r = (((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) + (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * 1.000000);
	out[1].i = (((((in0.i - in2.i) * (-0.000000)) - ((in0.i - in2.i) * (-0.000000))) + (((in1.i - in3.i) * (-1.000000)) - ((in1.i - in3.i) * (-1.000000)))) * 1.000000);
	out[2].r = (((((in0.r + in2.r) - (in1.r + in3.r)) * (1.000000)) - (((in0.r + in2.r) - (in1.r + in3.r)) * (1.000000))) * 1.000000);
	out[2].i = (((((in0.i + in2.i) - (in1.i + in3.i)) * (-0.000000)) - (((in0.i + in2.i) - (in1.i + in3.i)) * (-0.000000))) * 1.000000);
	out[3].r = (((((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) - (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * (1.000000)) - (((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) - (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * (1.000000))) * 1.000000);
	out[3].i = (((((((in0.i - in2.i) * (-0.000000)) - ((in0.i - in2.i) * (-0.000000))) - (((in1.i - in3.i) * (-1.000000)) - ((in1.i - in3.i) * (-1.000000)))) * (-0.000000)) - (((((in0.i - in2.i) * (-0.000000)) - ((in0.i - in2.i) * (-0.000000))) - (((in1.i - in3.i) * (-1.000000)) - ((in1.i - in3.i) * (-1.000000)))) * (-0.000000))) * 1.000000);
}

__inline static void fft_x4inv(cpx *in, cpx *out)
{
	cpx in0 = in[0];
	cpx in1 = in[1];
	cpx in2 = in[2];
	cpx in3 = in[3];
	out[0].r = (((in0.r + in2.r) + (in1.r + in3.r)) * 0.250000);
	out[0].i = (((in0.i + in2.i) + (in1.i + in3.i)) * 0.250000);
	out[1].r = (((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) + (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * 0.250000);
	out[1].i = (((((in0.i - in2.i) * (0.000000)) - ((in0.i - in2.i) * (0.000000))) + (((in1.i - in3.i) * (1.000000)) - ((in1.i - in3.i) * (1.000000)))) * 0.250000);
	out[2].r = (((((in0.r + in2.r) - (in1.r + in3.r)) * (1.000000)) - (((in0.r + in2.r) - (in1.r + in3.r)) * (1.000000))) * 0.250000);
	out[2].i = (((((in0.i + in2.i) - (in1.i + in3.i)) * (0.000000)) - (((in0.i + in2.i) - (in1.i + in3.i)) * (0.000000))) * 0.250000);
	out[3].r = (((((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) - (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * (1.000000)) - (((((in0.r - in2.r) * (1.000000)) - ((in0.r - in2.r) * (1.000000))) - (((in1.r - in3.r) * (-0.000000)) - ((in1.r - in3.r) * (-0.000000)))) * (1.000000))) * 0.250000);
	out[3].i = (((((((in0.i - in2.i) * (0.000000)) - ((in0.i - in2.i) * (0.000000))) - (((in1.i - in3.i) * (1.000000)) - ((in1.i - in3.i) * (1.000000)))) * (0.000000)) - (((((in0.i - in2.i) * (0.000000)) - ((in0.i - in2.i) * (0.000000))) - (((in1.i - in3.i) * (1.000000)) - ((in1.i - in3.i) * (1.000000)))) * (0.000000))) * 0.250000);
}


#endif